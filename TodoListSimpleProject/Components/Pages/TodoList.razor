@page "/TodoList"

@inject ITodoListService TodoListService
@inject ISnackbar Snackbar

<PageTitle>Todo list page</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Todo list example</MudText>

<MudDropContainer T="KanbanTaskItemDto"
                  @ref="_dropContainer"
                  Items="@_sections.SelectMany(x => x.Items).ToList()"
                  ItemsSelector="@((item,column) => item.SectionId.ToString("N") == column)"
                  ItemDropped="TaskUpdated"
                  Class="d-flex flex-row">
    <ChildContent>
        @foreach (var item in _sections)
        {
            <MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                <MudToolBar Gutters="false">
                    <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                    <MudSpacer />
                    <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                        <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteSection(item))">Delete section</MudButton>
                        <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename section</MudButton>
                    </MudMenu>
                </MudToolBar>
                <MudDropZone T="KanbanTaskItemDto" Identifier="@item.Id.ToString("N")" Class="mud-height-full" />
                @if (_addTaskOpen)
                {
                    <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                        <MudTextField @bind-Value="_newTaskName" Placeholder="New Task" Underline="false" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                        <MudButton OnClick="@(async () => await AddTaskToSection(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add task</MudButton>
                    </MudPaper>
                }
                else
                {
                    <MudButton OnClick="@(() => _addTaskOpen = !_addTaskOpen)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add task</MudButton>
                }
            </MudPaper>
        }
        <MudPaper Class="pa-4" Elevation="0" Width="224px">
            @if (_addSectionOpen)
            {
                <MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
                    <EditForm Model="@_newSectionModel" OnValidSubmit="OnValidSectionSubmit">
                        <DataAnnotationsValidator />
                        <MudTextField @bind-Value="_newSectionModel.Name" For="@(() => _newSectionModel.Name)" Placeholder="New section" Underline="false"></MudTextField>
                        <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add section</MudButton>
                    </EditForm>
                </MudPaper>
            }
            else
            {
                <MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add section</MudButton>
            }
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Content</MudPaper>
    </ItemRenderer>
</MudDropContainer>
@code {

    private MudDropContainer<KanbanTaskItemDto> _dropContainer;

    private bool _addSectionOpen;

    private bool _addTaskOpen = true;
    /* Setup for board  */
    private List<KanBanSectionDto> _sections = new();

    KanBanNewForm _newSectionModel = new KanBanNewForm();

    private string _newTaskName { get; set; }


    /* handling board events */
    private void TaskUpdated(MudItemDropInfo<KanbanTaskItemDto> info)
    {
        // info.Item.Status = info.DropzoneIdentifier;
    }

    protected override Task OnInitializedAsync()
    {
        return UpdateFromDatabase();
    }

    private async Task UpdateFromDatabase()
    {
        _sections = await TodoListService
            .GetSectionsWithItemsAsync()
            // If the result is successful, return the value; otherwise, return an empty list
            // we are going to ignore the error for this example
            .MatchAsync(x => x, x => []);


    }

    private void OnValidSectionSubmit(EditContext context)
    {
        _sections.Add(new KanBanSectionDto(Guid.CreateVersion7(), _newSectionModel.Name, []));
        _newSectionModel.Name = string.Empty;
        _addSectionOpen = false;
    }

    private void OpenAddNewSection()
    {
        _addSectionOpen = true;
    }

    private async Task AddTaskToSection(KanBanSectionDto sectionDto)
    {
        var newTask = new NewTaskItemDto(_newTaskName, sectionDto.Id);

        var res = await TodoListService.AddTodoItemAsync(newTask);

        await res.MatchAsync(
            async _ =>
                        {
                            _newTaskName = string.Empty;
                            _addTaskOpen = false;
                            await UpdateFromDatabase();
                            await InvokeAsync(StateHasChanged);
                            Snackbar.Add("The task is added successfully", Severity.Success);
                            _dropContainer.Refresh();
                        },
            error =>
                        {
                            Snackbar.Add(error.Message, Severity.Error);
                            return Task.CompletedTask;
                        }
            );

    }

    private void DeleteSection(KanBanSectionDto sectionDto)
    {
        // if (_sections.Count == 1)
        // {
        //     _tasks.Clear();
        //     _sections.Clear();
        // }
        // else
        // {
        //     int newIndex = _sections.IndexOf(sectionDto) - 1;
        //     if (newIndex < 0)
        //     {
        //         newIndex = 0;
        //     }

        //     _sections.Remove(sectionDto);

        //     var tasks = _tasks.Where(x => x.Status == sectionDto.Name);
        //     foreach (var item in tasks)
        //     {
        //         item.Status = _sections[newIndex].Name;
        //     }
        // }
    }
}
